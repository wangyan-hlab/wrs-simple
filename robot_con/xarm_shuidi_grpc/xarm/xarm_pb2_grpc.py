# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import robot_con.xarm_shuidi_grpc.xarm.xarm_pb2 as xarm__pb2


class XArmStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.move_jspace_path = channel.unary_unary(
                '/XArm/move_jspace_path',
                request_serializer=xarm__pb2.Path.SerializeToString,
                response_deserializer=xarm__pb2.Status.FromString,
                )
        self.get_jnt_values = channel.unary_unary(
                '/XArm/get_jnt_values',
                request_serializer=xarm__pb2.Empty.SerializeToString,
                response_deserializer=xarm__pb2.JntValues.FromString,
                )
        self.jaw_to = channel.unary_unary(
                '/XArm/jaw_to',
                request_serializer=xarm__pb2.GripperStatus.SerializeToString,
                response_deserializer=xarm__pb2.Status.FromString,
                )
        self.get_gripper_status = channel.unary_unary(
                '/XArm/get_gripper_status',
                request_serializer=xarm__pb2.Empty.SerializeToString,
                response_deserializer=xarm__pb2.GripperStatus.FromString,
                )


class XArmServicer(object):
    """Missing associated documentation comment in .proto file."""

    def move_jspace_path(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_jnt_values(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def jaw_to(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_gripper_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_XArmServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'move_jspace_path': grpc.unary_unary_rpc_method_handler(
                    servicer.move_jspace_path,
                    request_deserializer=xarm__pb2.Path.FromString,
                    response_serializer=xarm__pb2.Status.SerializeToString,
            ),
            'get_jnt_values': grpc.unary_unary_rpc_method_handler(
                    servicer.get_jnt_values,
                    request_deserializer=xarm__pb2.Empty.FromString,
                    response_serializer=xarm__pb2.JntValues.SerializeToString,
            ),
            'jaw_to': grpc.unary_unary_rpc_method_handler(
                    servicer.jaw_to,
                    request_deserializer=xarm__pb2.GripperStatus.FromString,
                    response_serializer=xarm__pb2.Status.SerializeToString,
            ),
            'get_gripper_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_gripper_status,
                    request_deserializer=xarm__pb2.Empty.FromString,
                    response_serializer=xarm__pb2.GripperStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'XArm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class XArm(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def move_jspace_path(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/XArm/move_jspace_path',
            xarm__pb2.Path.SerializeToString,
            xarm__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_jnt_values(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/XArm/get_jnt_values',
            xarm__pb2.Empty.SerializeToString,
            xarm__pb2.JntValues.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def jaw_to(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/XArm/jaw_to',
            xarm__pb2.GripperStatus.SerializeToString,
            xarm__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_gripper_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/XArm/get_gripper_status',
            xarm__pb2.Empty.SerializeToString,
            xarm__pb2.GripperStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
